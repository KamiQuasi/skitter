{"version":3,"sources":["../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/extends/_extends.scss","pfe-icon.css","pfe-icon.scss","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAGM;EC8NE;ID9NoF,UAAA;IE2CxF,yBAAiC;EC1CnC;AACF;;AFuNQ;EAtJY,qEAAgD;EAAhD,wEAAgD;EAAhD,sFAAgD;EAAhD,sFAAgD;EAAhD,0FAAgD;EAAhD,oFAAgD;EAAhD,uGAAgD;EAAhD,uGAAgD;EAAhD,sGAAgD;AErDpE;;AF2MQ;EAtJY,0EAAgD;EAAhD,0EAAgD;EAAhD,2FAAgD;EAAhD,2FAAgD;EAAhD,+FAAgD;EAAhD,8FAAgD;EAAhD,4GAAgD;EAAhD,4GAAgD;EAAhD,gHAAgD;AEzCpE;;AF+LQ;EAtJY,+DAAgD;EAAhD,4DAAgD;EAAhD,6EAAgD;EAAhD,6EAAgD;EAAhD,iFAAgD;EAAhD,2EAAgD;EAAhD,8FAAgD;EAAhD,8FAAgD;EAAhD,6FAAgD;AE7BpE;;ACTA;EACE,sCAAO;EAEP,kBAAkB;EAClB,qBAAsB;EAGtB,4BAAiE;EAAjE,0GAAiE;EACjE,qCAAmC;EAAnC,kCAAmC;EAAnC,6BAAmC;EACnC,6BAAiE;EAAjE,2GAAiE;EACjE,sCAAmC;EAAnC,mCAAmC;EAAnC,8BAAmC;EACnC,cAAc;ADShB;;ACPU;EACN,cAAc;EACd,mBCoFgC;EDpFhC,iFCoFgC;EDnFhC,gBCmFgC;EDnFhC,8ECmFgC;AFzEpC;;ACbU;EAMJ,aAAa;ADWnB;;AC9BA;EAwBI,UC2EgC;ED3EhC,8DC2EgC;ED1EhC,WC0EgC;ED1EhC,+DC0EgC;AFhEpC;;ACNA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,6BCmEkC;EDnElC,+DCmEkC;EDlElC,2BCkEkC;EDlElC,mJCkEkC;EDjElC,UCiEkC;EDjElC,oCCiEkC;AFxDpC;;AHxEM;EI0DN;IJ1D4F,UAAA;IIsB1F,kCAAkC;EDwDlC;ECtDA;IACI,6BAA6B;EDwDjC;AACF;;AH7EsC;EIqDtC;IJrD0C,+BAAA;IIiBxC,kCAAkC;EDkElC;EChEA;IACI,6BAA6B;EDkEjC;AACF;;AH5FM;EI0DN;IJ1D4F,UAAA;II6EtF,oBAAY;YAAZ,YAAY;EDqBhB;AACF;;ACzCA;EAwBI,oBC8CgC;ED9ChC,kGC8CgC;AFzBpC;;AC7CA;EA4BI,aAAa;ADqBjB;;AChBE;EHoBU,qBAA+B;AEA3C;;ACpBE;EHoBU,qBAA+B;AEI3C;;ACxBE;EHoBU,qBAA+B;AEQ3C;;ACtBA;EHcY,uBAA+B;AEY3C;;ACtBA;EHUY,sBAA+B;AEgB3C;;ACtBA;EHMY,sBAA+B;AEoB3C;;ACtBA;EHEY,sBAA+B;AEwB3C;;ACrBE;EHHU,uEAA+B;EAA/B,uBAA+B;AE6B3C;;AC1BE;EHHU,wEAA+B;EAA/B,uBAA+B;AEkC3C;;AC/BE;EHHU,uEAA+B;AEsC3C;;ACnCE;EHHU,sEAA+B;EAA/B,uBAA+B;AE2C3C;;ACxCE;EHHU,mEAA+B;EAA/B,uBAA+B;AEgD3C;;AC7CE;EHHU,sEAA+B;EAA/B,uBAA+B;AEqD3C;;ACzCE;EHZU,mEAA+B;EAA/B,wBAA+B;AE0D3C;;AC9CE;EHZU,kEAA+B;EAA/B,wBAA+B;AE+D3C;;ACnDE;EHZU,oEAA+B;EAA/B,uBAA+B;AEoE3C;;ACxDE;EHZU,qEAA+B;EAA/B,uBAA+B;AEyE3C;;AC7DE;EHZU,wEAA+B;EAA/B,4BAA+B;AE8E3C;;AClEE;EHZU,oEAA+B;EAA/B,4BAA+B;AEmF3C;;AC9DA;EHrBY,qGAA+B;EAA/B,wDAA+B;EAA/B,0BAA+B;EAA/B,gEAA+B;EAA/B,kGAA+B;AE2F3C;;AC5DA;EACE,aAAa;AD+Df;;AC5DA;;EAEE,aAAa;AD+Df;;AC5DA;EHxCY,mBAA+B;AEwG3C","file":"pfe-icon.css","sourcesContent":["@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: #{pfe-var(surface--border-style)};\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","/// ===========================================================================\n/// Broadcast mixin, for use with container components.\n///\n/// This will print all the broadcast variables, and set the value to the theme of your choosing, like on-dark or on-saturated.\n/// @param {String} $theme - Look up values from theme contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $BROADCAST-VARS - Default list of supported broadcast variables\n///\n/// @example Usage in a container component, i.e. pfe-card:\n/// ```\n///    :host {\n///      @include pfe-set-broadcast-theme(dark);\n///    }\n/// ```\n/// @output:\n/// ```\n///    :host {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n///    }\n/// ```\n/// ===========================================================================\n@mixin pfe-set-broadcast-theme($theme, $broadcast: $BROADCAST-VARS) {\n    @each $type in $broadcast {\n        $list: ();\n        $string: \"\";\n        $context: \"\";\n        $state: \"\";\n\n        @if str-starts-with($type, \"link\") {\n            $list: append($list, \"#{$type}\");\n\n            @each $s in (hover, focus, visited) {\n                $state: \"--#{$s}\";\n                $string: \"#{$type}#{$state}\";\n\n                @if not index($list, $string) {\n                    $list: append($list, \"#{$type}#{$state}\");\n                }\n            }\n        }\n        @else {\n            @if not index($list, $string) {\n                $list: append($list, \"#{$type}\");\n            }\n        }\n\n        @if index($THEMES, $theme) != null {\n            @if $theme != \"light\" {\n                $context: \"--on-#{$theme}\";\n            }\n        }\n        \n        @each $item in $list {\n            @if not index($BROADCAST-VARS, $type) {\n                @warn \"--#{$repo}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n            }\n            @else if not pfe-broadcasted(#{$item}#{$context}) {\n                @warn \"#{$item}#{$context} value does not currently exist.\";\n            }\n            @else {\n                @if index($THEMES, $theme) != null {\n                    --#{$repo}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context})};\n                }\n                @else {\n                    @error \"The #{$theme} context does not appear to be part of a supported theme.\";\n                }\n            }\n        }\n    }\n}\n\n/// ===========================================================================\n/// Define local variable\n///\n/// Returns CSS Variable for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n    @each $property, $value in $map {\n        $name: \"--#{$property}\";\n        $styles: $value;\n\n        @if type-of($value) == \"map\" {\n            @each $prop, $v in $value {\n                $name: \"__#{$property}--#{$prop}\";\n                $styles: $v;\n\n                // Print the variable definition\n                --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n            }\n        }\n        @else {\n            // Print the variable definition\n            --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n        }\n    }\n}\n\n/// ===========================================================================\n/// Surface properties  \n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct theme colors. \n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n///\n/// @example \n/// ```\n/// $LOCAL: band;\n/// @include surfaces;\n/// ```\n///\n/// @output\n/// ```\n/// :host([pfe-color=\"darker\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"darkest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"base\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lighter\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lightest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"accent\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///   --theme: saturated;\n/// }\n/// \n/// :host([pfe-color=\"complement\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///   --theme: saturated;\n/// }\n/// ```\n/// ===========================================================================\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: #{$repo}-color) {\n    @each $color in $surfaces {\n        $theme: #{pfe-get-theme(surface--#{$color}--theme)};\n        :host([#{$attr-name}=\"#{$color}\"]) {\n            @include pfe-print-local((\n                BackgroundColor: pfe-var(surface--#{$color}),\n                theme: pfe-var(surface--#{$color}--theme, #{$theme})\n            ));\n            @extend %fallback-surface;\n        }\n    }\n}\n\n/// ===========================================================================\n/// Context properties\n///\n/// Prints the `on` attribute with IE11 fallbacks\n///\n/// @param {List} themes [$THEMES] - defaults to the global $THEMES list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example\n/// ```\n///   @include theme-contexts; // imports on=\"light\" etc support\n/// ```\n///\n/// @output\n/// ```\n/// :host([on=\"dark\"]) {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n/// }\n/// \n/// @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///   :host([on=\"dark\"]) {\n///     color: #fff;\n///     color: var(--pfe-theme--color--text--on-dark, #fff);\n///   }\n/// }\n/// ```\n/// ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"]) \n/// ===========================================================================\n@mixin pfe-theme-contexts($themes: $THEMES, $ie-fallback: true) {\n    // Helper attributes to aid in theming\n    @each $theme in $themes {\n        :host([on=\"#{$theme}\"]) {\n            @include pfe-set-broadcast-theme($theme);\n        }\n    }\n    @if $ie-fallback {\n        :host {\n            @extend %fallback-text;\n        }\n    }\n}\n","%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: #{pfe-var(container-spacer)};\n}\n\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n","@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host {\n    /* IE10+ */\n    color: #151515 !important;\n  }\n}\n\n:host([on=\"dark\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #73bcf7);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #bee1f4);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #bee1f4);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #bee1f4);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-dark, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-dark, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-dark, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-dark, none);\n}\n\n:host([on=\"saturated\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-saturated, #fff);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-saturated, #fff);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-saturated, #fafafa);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-saturated, #fafafa);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-saturated, #8476d1);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-saturated, underline);\n}\n\n:host([on=\"light\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text, #151515);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link, #06c);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover, #004080);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus, #004080);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited, #6753ac);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited, none);\n}\n\n:host {\n  --theme: var(--pfe-icon--theme, light);\n  position: relative;\n  display: inline-block;\n  max-width: calc(var(--pfe-icon--size, var(--pfe-theme--icon-size, 1em)) + var(--pfe-icon--Padding, 0) * 2);\n  width: fit-content !important;\n  max-height: calc(var(--pfe-icon--size, var(--pfe-theme--icon-size, 1em)) + var(--pfe-icon--Padding, 0) * 2);\n  height: fit-content !important;\n  line-height: 0;\n}\n\n:host([data-block]) {\n  display: block;\n  margin-bottom: var(--pfe-icon--spacing, var(--pfe-theme--container-spacer, 16px));\n  margin-top: var(--pfe-icon--spacing, var(--pfe-theme--container-spacer, 16px));\n}\n\n:host([data-block]):first-child {\n  margin-top: 0;\n}\n\n:host svg {\n  width: var(--pfe-icon--size, var(--pfe-theme--icon-size, 1em));\n  height: var(--pfe-icon--size, var(--pfe-theme--icon-size, 1em));\n}\n\n:host(:not(.load-failed)) {\n  vertical-align: middle;\n  border-radius: 50%;\n  background-color: var(--pfe-icon--BackgroundColor, transparent);\n  border: var(--pfe-icon--BorderWidth, 0) var(--pfe-theme--ui--border-style, solid) var(--pfe-icon--BorderColor, var(--pfe-icon--color, transparent));\n  padding: var(--pfe-icon--Padding, 0);\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host(:not(.load-failed)) {\n    /* IE10+ */\n    background-color: white !important;\n  }\n  :host(:not(.load-failed)) svg filter feFlood {\n    flood-color: black !important;\n  }\n}\n\n@supports (-ms-accelerator: true) {\n  :host(:not(.load-failed)) {\n    /* Microsoft Edge Browser 12+ */\n    background-color: white !important;\n  }\n  :host(:not(.load-failed)) svg filter feFlood {\n    flood-color: black !important;\n  }\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host(:not(.load-failed)) svg image {\n    /* IE10+ */\n    filter: none;\n  }\n}\n\n:host(:not(.load-failed)) filter feFlood {\n  flood-color: var(--pfe-icon--Color, var(--pfe-icon--color, var(--pfe-broadcasted--text, #3c3f42)));\n}\n\n:host(:not(.load-failed)) .pfe-icon--fallback {\n  display: none;\n}\n\n:host([pfe-size=\"2x\"]) {\n  --pfe-icon--size: 2em;\n}\n\n:host([pfe-size=\"3x\"]) {\n  --pfe-icon--size: 3em;\n}\n\n:host([pfe-size=\"4x\"]) {\n  --pfe-icon--size: 4em;\n}\n\n:host([pfe-size=\"xl\"]) {\n  --pfe-icon--size: 100px;\n}\n\n:host([pfe-size=\"lg\"]) {\n  --pfe-icon--size: 64px;\n}\n\n:host([pfe-size=\"md\"]) {\n  --pfe-icon--size: 32px;\n}\n\n:host([pfe-size=\"sm\"]) {\n  --pfe-icon--size: 14px;\n}\n\n:host([pfe-color=\"critical\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--critical, #bb0000);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"important\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--important, #d73401);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"moderate\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--moderate, #ffc024);\n}\n\n:host([pfe-color=\"success\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--success, #2e7d32);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"info\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--info, #0277bd);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"default\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--feedback--default, #4f5255);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"lightest\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-icon--theme: light;\n}\n\n:host([pfe-color=\"base\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--base, #f0f0f0);\n  --pfe-icon--theme: light;\n}\n\n:host([pfe-color=\"darker\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--darker, #3c3f42);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"darkest\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--darkest, #151515);\n  --pfe-icon--theme: dark;\n}\n\n:host([pfe-color=\"complement\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--complement, #002952);\n  --pfe-icon--theme: saturated;\n}\n\n:host([pfe-color=\"accent\"]) {\n  --pfe-icon--color: var(--pfe-theme--color--surface--accent, #004080);\n  --pfe-icon--theme: saturated;\n}\n\n:host([pfe-circled]:not([pfe-circled=\"false\"])) {\n  --pfe-icon--BackgroundColor: var(--pfe-icon--color, var(--pfe-theme--color--surface--lightest, #fff));\n  --pfe-icon--Color: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-icon--Padding: 0.5em;\n  --pfe-icon--BorderWidth: var(--pfe-theme--ui--border-width, 1px);\n  --pfe-icon--BorderColor: var(--pfe-icon--color, var(--pfe-theme--color--surface--border, #d2d2d2));\n}\n\n:host(.load-failed) svg image {\n  display: none;\n}\n\n:host(.load-failed.has-fallback) svg,\n:host(.load-failed[on-fail=\"collapse\"]) svg {\n  display: none;\n}\n\n:host(.load-failed[on-fail=\"collapse\"]) {\n  --pfe-icon--size: 0;\n}\n","@import \"../../pfe-sass/pfe-sass\";\n@include pfe-theme-contexts;\n\n$LOCAL: icon;\n$LOCAL-VARIABLES: (\n  theme: light,\n  size: pfe-var(icon-size),\n  spacing: pfe-var(container-spacer),\n  color: transparent,\n  Padding: 0,\n  BackgroundColor: transparent,\n  BorderWidth: 0,\n);\n\n// Nested internal variables (pfe-local calls), maps cannot \"self-reference\"\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  Color: pfe-local(color, $fallback: pfe-broadcasted(text)),\n  BorderColor: pfe-local(color),\n));\n\n/// ===========================================================================\n/// Component Specific SASS Vars\n/// ===========================================================================\n\n@mixin greyscale-fallback() {\n  background-color: white !important;\n\n  & svg filter feFlood {\n      flood-color: black !important;\n  }\n}\n\n:host {\n  --theme: #{pfe-local(theme)};  \n\n  position: relative;\n  display:  inline-block;\n\n  // Supports sizing while preserving aspect ratio (despite layout)\n  max-width:   calc(#{pfe-local(size)} + #{pfe-local(Padding)} * 2);\n  width:       fit-content !important;\n  max-height:  calc(#{pfe-local(size)} + #{pfe-local(Padding)} * 2);\n  height:      fit-content !important;\n  line-height: 0;\n\n  @at-root #{&}([data-block]) {\n    display: block;\n    margin-bottom: pfe-local(spacing);\n    margin-top:    pfe-local(spacing);\n\n    &:first-child {\n      margin-top: 0;\n    }\n  }\n\n  svg {\n    width:  pfe-local(size);\n    height: pfe-local(size);\n  }\n}\n\n:host(:not(.load-failed)) {\n  vertical-align: middle;\n  border-radius: 50%;\n  background-color: pfe-local(BackgroundColor);\n  border: pfe-local(BorderWidth) pfe-var(ui--border-style) pfe-local(BorderColor);\n  padding: pfe-local(Padding);\n\n  @include browser-query(ie11) {\n      @include greyscale-fallback();\n  }\n\n\n  // Edge 12+ CSS\n  @include browser-query(edge12) {\n      @include greyscale-fallback();\n  }\n\n  svg image {\n    @include browser-query(ie11) {\n      filter: none;\n    }\n  }\n\n  filter feFlood {\n    flood-color: pfe-local(Color);\n  }\n\n  .pfe-icon--fallback {\n    display: none;\n  }\n}\n\n@for $num from 2 through 4 {\n  :host([pfe-size=\"#{$num}x\"]) {\n    @include pfe-print-local((size: #{$num}em));\n  }\n}\n\n// TODO: Sort out sizing\n:host([pfe-size=\"xl\"]) {\n  @include pfe-print-local((size: 100px));\n}\n\n:host([pfe-size=\"lg\"]) {\n  @include pfe-print-local((size: 64px));\n}\n\n:host([pfe-size=\"md\"]) {\n  @include pfe-print-local((size: 32px));\n}\n\n:host([pfe-size=\"sm\"]) {\n  @include pfe-print-local((size: 14px));\n}\n\n@each $level in (critical, important, moderate, success, info, default) {\n  :host([pfe-color=\"#{$level}\"]) {\n    @include pfe-print-local((color: #{pfe-var(feedback--#{$level})}));\n    @if $level != \"moderate\" {\n      @include pfe-print-local((theme: dark));\n    }\n  }\n}\n\n@each $color in (lightest, base, darker, darkest, complement, accent) {\n  :host([pfe-color=\"#{$color}\"]) {\n    $theme: map-deep-get($pfe-colors, surface--#{$color}--theme);\n    @include pfe-print-local((color:  #{pfe-var(surface--#{$color})}));\n    @include pfe-print-local((theme: #{$theme}));\n  }\n}\n\n// May need Feedback Darkest colors too.\n\n:host([pfe-circled]:not([pfe-circled=\"false\"])) {\n  @include pfe-print-local((\n    BackgroundColor: pfe-local(color, $fallback: pfe-var(surface--lightest)),\n    Color:           pfe-broadcasted(text),\n    Padding:         .5em,\n    BorderWidth:     pfe-var(ui--border-width),\n    BorderColor:     pfe-local(color, $fallback: pfe-var(surface--border))\n  ));\n}\n\n:host(.load-failed) svg image {\n  display: none;\n}\n\n:host(.load-failed.has-fallback) svg,\n:host(.load-failed[on-fail=\"collapse\"]) svg {\n  display: none;\n}\n\n:host(.load-failed[on-fail=\"collapse\"]) {\n  @include pfe-print-local((size: 0));\n}\n","/// ===========================================================================\n/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map - SASS Map of variables\n/// @param {String} $fallback [\"\"] - Optional fallback override\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit\n/// @example -\n///\n///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-var( text )};\n///           background:  #{pfe-var( surface--base )};\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-get-from-map($category, $key, $map, $fallback: null) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--\";\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @requires {Map} $pfe-vars - A map of the variables in the repository\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var( container-spacer )};\n///           font-size:   #{pfe-var( font-size )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            padding: var(--pfe-theme--container-spacer, 16px);\n///            font-size: var(--pfe-theme--font-size, 16px);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// ===========================================================================\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// ===========================================================================\n/// Apply broadcast function, for use with text & links.\n///\n/// It requests that the color property look for a broadcasted variable (from a container component)\n/// first if there is one, and if not, use a theme variable, with the hex color fallback.\n///\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n///\n/// @example:   color: #{pfe-broadcasted(ui-base--hover)};\n/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.\";\n///\n/// @example:   color: #{pfe-broadcasted(link)};\n/// @output:  color: var(--pfe-broadcasted--link);\n/// Was: pfe-radio!\n/// ===========================================================================\n@function pfe-broadcasted($broadcast) {\n    $fallback: \"\";\n    @if $USE-FALLBACK {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           z-index:     #{pfe-zindex( content )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            z-index: var(--pfe-theme--zindex--content, 1);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// ===========================================================================\n/// Map value fetch\n///\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n///\n/// @param {String} $name - Name of the key for the map\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           background-color:     #{pfe-fetch( ui-base )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            background-color: #06c;\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"]}