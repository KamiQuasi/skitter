{"version":3,"sources":["pfe-modal.scss","../../pfe-sass/extends/_extends.scss","pfe-modal.css","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAmHE;ECvGA,6BAA6B;EAC7B,YAAY;EACZ,SAAS;EACT,UAAU;EACV,gBAAgB;ACVlB;;AFeA;EACC,cAAc;EACd,kBAAkB;AEZnB;;AFcG;EAJH;IG6FY,+EAA+B;EDlGzC;AACF;;AFgBC;EACC,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,eAAe;EACf,YAAY;EACZ,WAAW;EACX,MAAM;EACN,OAAO;EACP,4BAAsB;EAAtB,6BAAsB;EAAtB,8BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;EACvB,WIDkC;EJClC,4CIDkC;AFZpC;;AFGE;EAaC,aAAa;AEZhB;;AFeC;EACC,eAAe;EACf,YAAY;EACZ,WAAW;EACX,MAAM;EACN,OAAO;EACP,uCI4EkC;EJ5ElC,qHI4EkC;EJ3ElC,eAAe;AEZjB;;AFKE;EAUC,aAAa;AEXhB;;AFcC;EACC,uCAAO;EAEP,kBAAkB;EAClB,eIiEkC;EJjElC,mDIiEkC;EJhElC,eIgEkC;EJhElC,2CIgEkC;EJ/DlC,gBI+DkC;EJ/DlC,6CI+DkC;EJ9DlC,cAAc;EACd,oHI5BkC;UJ4BlC,4GI5BkC;EJ4BlC,sJI5BkC;UJ4BlC,8II5BkC;EJ6BlC,sBI7BkC;EJ6BlC,kEI7BkC;EJ8BlC,cI9BkC;EJ8BlC,6CI9BkC;EJ+BlC,kBI/BkC;EJ+BlC,uDI/BkC;AFmBpC;;AFcE;EAbD;IAcE,eIuDiC;IJvDjC,2CIuDiC;EFjElC;AACF;;AFYC;EACC,kBAAkB;EAClB,mBAAmB;AETrB;;AFOE;EAKC,aAAa;AERhB;;AFYC;EACC,gBAAgB;EAChB,yBAA4B;MAA5B,4BAA4B;EAC5B,gBIwCkC;EJxClC,6CIwCkC;EJvClC,sEIuCkC;EJvClC,qPIuCkC;EJtClC,8BAAsB;UAAtB,sBAAsB;AETxB;;AFWE;EAPD;IG0BW,uMAA+B;EDzBzC;AACF;;AFWE;;EAKE,wBAAwB;AEX5B;;AFPE;EAuBC,wBAAwB;AEZ3B;;AFgBC;EAEC,kBAAkB;EAClB,qBAA+C;EAA/C,0DAA+C;EAC/C,uBAAiD;EAAjD,4DAAiD;EACjD,eAAe;EACf,eAAe;EACf,aIhFkC;EJgFlC,kDIhFkC;AFkEpC;;AFgBE;EATD;IAUE,SInFiC;IJmFjC,8CInFiC;IJoFjC,WIpFiC;IJoFjC,gDIpFiC;EFwElC;AACF;;AFcE;EAdD;IAeE,mBAA6C;IAA7C,wDAA6C;IAC7C,qBAA+C;IAA/C,0DAA+C;EEVhD;AACF;;AFPE;EAoBC,aI7FiC;EJ6FjC,4CI7FiC;EJ8FjC,YI9FiC;EJ8FjC,iDI9FiC;EJ+FjC,WI/FiC;EJ+FjC,gDI/FiC;EJgGjC,wBIPiC;EJOjC,4FIPiC;EJQjC,uBIRiC;EJQjC,2FIRiC;AFDpC","file":"pfe-modal.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: modal;\n\n$pfe-modal--breakpoint--medium: 640px;\n\n$LOCAL-VARIABLES: (\n\ttheme: light,\n\tMaxWidth: 70vw,\n\tMinWidth: 50vw,\n\tMaxWidth--mobile: 94vw,\n\tMaxHeight: 90vh,\n\tPadding: calc(#{pfe-var(container-padding)} * 2) calc(#{pfe-var(container-padding)} * 3.5) calc(#{pfe-var(container-padding)} * 2) calc(#{pfe-var(container-padding)} * 2),\n\toverlay: (\n\t\tBackgroundColor: pfe-var(overlay)\n\t),\n\tclose: (\n\t\tsize: calc(#{pfe-var(ui--element--size)} - 4px)\n\t)\n);\n\n:host {\n\tdisplay: block;\n\tposition: relative;\n\n   @media screen and (max-height: $pfe-modal--breakpoint--medium) {\n\t   @include pfe-print-local((\n\t\t   Padding: 0 0 0 calc(#{pfe-var(container-padding)} * 2)\n\t   ));\n   }\n}\n\n.pfe-modal {\n\t&__outer {\n\t\tdisplay: flex;\n\t\tposition: fixed;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: pfe-zindex(modal);\n\n\t\t&[hidden] {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\t&__overlay {\n\t\tposition: fixed;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbackground-color: pfe-local(BackgroundColor, $region: overlay);\n\t\tcursor: pointer;\n\n\t\t&[hidden] {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\t&__window {\n\t\t--theme: #{pfe-local(theme)};\n\n\t\tposition: relative;\n\t\tmax-width: pfe-local(MaxWidth--mobile);\n\t\tmin-width: pfe-local(MinWidth);\n\t\tmax-height: pfe-local(MaxHeight);\n\t\tmargin: 0 auto;\n\t\tbox-shadow: pfe-var(box-shadow--lg);\n\t\tbackground-color: pfe-var(surface--lightest);\n\t\tcolor: pfe-var(text);\n\t\tborder-radius: pfe-var(ui--border-radius);\n\t\t\n\t\t@media screen and (min-width: $pfe-modal--breakpoint--medium) {\n\t\t\tmax-width: pfe-local(MaxWidth);\n\t\t}\n\t}\n\t&__container {\n\t\tposition: relative;\n\t\tmax-height: inherit;\n\n\t\t&[hidden] {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t&__content {\n\t\toverflow-y: auto;\n\t\toverscroll-behavior: contain;\n\t\tmax-height: pfe-local(MaxHeight);\n\t\tpadding: pfe-local(Padding);\n\t\tbox-sizing: border-box;\n\n\t\t@media screen and (max-height: $pfe-modal--breakpoint--medium) {\n\t\t\t@include pfe-print-local((\n\t\t\t\tPadding: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 3) pfe-var(container-padding) pfe-var(container-padding)\n\t\t\t));\n\t\t}\n\n\t\t:host(:not([has_header])) & {\n\n\t\t\t// Remove margin-top on the first slotted element that is not the header.\n\t\t\t::slotted(*:nth-child(2)),\n\t\t\t::slotted(*:nth-child(1)) {\n\t\t\t\tmargin-top: 0 !important;\n\t\t\t}\n\t\t}\n\n\t\t::slotted([slot=\"pfe-modal--header\"]) {\n\t\t\tmargin-top: 0 !important;\n\t\t}\n\t}\n\n\t&__close {\n\t\t@extend %reset-button;\n\t\tposition: absolute;\n\t\ttop: \tcalc(#{pfe-var(container-padding)} * .25);\n\t\tright: \tcalc(#{pfe-var(container-padding)} * .25);\n\t\tcursor: pointer;\n\t\tline-height: .5;\n\t\tpadding: pfe-var(container-padding);\n\n\t\t@media screen and (min-width: $pfe-modal--breakpoint--medium) {\n\t\t\ttop: \tpfe-var(container-padding);\n\t\t\tright: \tpfe-var(container-padding);\n\t\t}\n\n\t\t@media screen and (max-height: $pfe-modal--breakpoint--medium) and (min-width: $pfe-modal--breakpoint--medium) {\n\t\t\ttop: \tcalc(#{pfe-var(container-padding)} / 2);\n\t\t\tright: \tcalc(#{pfe-var(container-padding)} / 2);\n\t\t}\n\n\t\t> svg {\n\t\t\tfill: \tpfe-var(text);\n\t\t\theight: pfe-var(ui--element--size);\n\t\t\twidth: \tpfe-var(ui--element--size);\n\t\t\theight: pfe-local(size, $region: close);\n\t\t\twidth: \tpfe-local(size, $region: close);\n\t\t}\n\t}\n}\n","%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: #{pfe-var(container-spacer)};\n}\n\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n",".pfe-modal__close {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n:host {\n  display: block;\n  position: relative;\n}\n\n@media screen and (max-height: 640px) {\n  :host {\n    --pfe-modal--Padding: 0 0 0 calc(var(--pfe-theme--container-padding, 16px) * 2);\n  }\n}\n\n.pfe-modal__outer {\n  display: flex;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: var(--pfe-theme--zindex--modal, 99);\n}\n\n.pfe-modal__outer[hidden] {\n  display: none;\n}\n\n.pfe-modal__overlay {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background-color: var(--pfe-modal__overlay--BackgroundColor, var(--pfe-theme--color--overlay, rgba(21, 21, 21, 0.5)));\n  cursor: pointer;\n}\n\n.pfe-modal__overlay[hidden] {\n  display: none;\n}\n\n.pfe-modal__window {\n  --theme: var(--pfe-modal--theme, light);\n  position: relative;\n  max-width: var(--pfe-modal--MaxWidth--mobile, 94vw);\n  min-width: var(--pfe-modal--MinWidth, 50vw);\n  max-height: var(--pfe-modal--MaxHeight, 90vh);\n  margin: 0 auto;\n  box-shadow: var(--pfe-theme--box-shadow--lg, 0 0.1875rem 0.4375rem 0.1875rem rgba(3, 3, 3, 0.13), 0 0.6875rem 1.5rem 1rem rgba(3, 3, 3, 0.12));\n  background-color: var(--pfe-theme--color--surface--lightest, #fff);\n  color: var(--pfe-theme--color--text, #151515);\n  border-radius: var(--pfe-theme--ui--border-radius, 2px);\n}\n\n@media screen and (min-width: 640px) {\n  .pfe-modal__window {\n    max-width: var(--pfe-modal--MaxWidth, 70vw);\n  }\n}\n\n.pfe-modal__container {\n  position: relative;\n  max-height: inherit;\n}\n\n.pfe-modal__container[hidden] {\n  display: none;\n}\n\n.pfe-modal__content {\n  overflow-y: auto;\n  overscroll-behavior: contain;\n  max-height: var(--pfe-modal--MaxHeight, 90vh);\n  padding: var(--pfe-modal--Padding, calc(var(--pfe-theme--container-padding, 16px) * 2) calc(var(--pfe-theme--container-padding, 16px) * 3.5) calc(var(--pfe-theme--container-padding, 16px) * 2) calc(var(--pfe-theme--container-padding, 16px) * 2));\n  box-sizing: border-box;\n}\n\n@media screen and (max-height: 640px) {\n  .pfe-modal__content {\n    --pfe-modal--Padding: var(--pfe-theme--container-padding, 16px) calc(var(--pfe-theme--container-padding, 16px) * 3) var(--pfe-theme--container-padding, 16px) var(--pfe-theme--container-padding, 16px);\n  }\n}\n\n:host(:not([has_header])) .pfe-modal__content ::slotted(*:nth-child(2)),\n:host(:not([has_header])) .pfe-modal__content ::slotted(*:nth-child(1)) {\n  margin-top: 0 !important;\n}\n\n.pfe-modal__content ::slotted([slot=\"pfe-modal--header\"]) {\n  margin-top: 0 !important;\n}\n\n.pfe-modal__close {\n  position: absolute;\n  top: calc(var(--pfe-theme--container-padding, 16px) * .25);\n  right: calc(var(--pfe-theme--container-padding, 16px) * .25);\n  cursor: pointer;\n  line-height: .5;\n  padding: var(--pfe-theme--container-padding, 16px);\n}\n\n@media screen and (min-width: 640px) {\n  .pfe-modal__close {\n    top: var(--pfe-theme--container-padding, 16px);\n    right: var(--pfe-theme--container-padding, 16px);\n  }\n}\n\n@media screen and (max-height: 640px) and (min-width: 640px) {\n  .pfe-modal__close {\n    top: calc(var(--pfe-theme--container-padding, 16px) / 2);\n    right: calc(var(--pfe-theme--container-padding, 16px) / 2);\n  }\n}\n\n.pfe-modal__close > svg {\n  fill: var(--pfe-theme--color--text, #151515);\n  height: var(--pfe-theme--ui--element--size, 20px);\n  width: var(--pfe-theme--ui--element--size, 20px);\n  height: var(--pfe-modal__close--size, calc(var(--pfe-theme--ui--element--size, 20px) - 4px));\n  width: var(--pfe-modal__close--size, calc(var(--pfe-theme--ui--element--size, 20px) - 4px));\n}\n","/// ===========================================================================\n/// Broadcast mixin, for use with container components.\n///\n/// This will print all the broadcast variables, and set the value to the theme of your choosing, like on-dark or on-saturated.\n/// @param {String} $theme - Look up values from theme contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $BROADCAST-VARS - Default list of supported broadcast variables\n///\n/// @example Usage in a container component, i.e. pfe-card:\n/// ```\n///    :host {\n///      @include pfe-set-broadcast-theme(dark);\n///    }\n/// ```\n/// @output:\n/// ```\n///    :host {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n///    }\n/// ```\n/// ===========================================================================\n@mixin pfe-set-broadcast-theme($theme, $broadcast: $BROADCAST-VARS) {\n    @each $type in $broadcast {\n        $list: ();\n        $string: \"\";\n        $context: \"\";\n        $state: \"\";\n\n        @if str-starts-with($type, \"link\") {\n            $list: append($list, \"#{$type}\");\n\n            @each $s in (hover, focus, visited) {\n                $state: \"--#{$s}\";\n                $string: \"#{$type}#{$state}\";\n\n                @if not index($list, $string) {\n                    $list: append($list, \"#{$type}#{$state}\");\n                }\n            }\n        }\n        @else {\n            @if not index($list, $string) {\n                $list: append($list, \"#{$type}\");\n            }\n        }\n\n        @if index($THEMES, $theme) != null {\n            @if $theme != \"light\" {\n                $context: \"--on-#{$theme}\";\n            }\n        }\n        \n        @each $item in $list {\n            @if not index($BROADCAST-VARS, $type) {\n                @warn \"--#{$repo}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n            }\n            @else if not pfe-broadcasted(#{$item}#{$context}) {\n                @warn \"#{$item}#{$context} value does not currently exist.\";\n            }\n            @else {\n                @if index($THEMES, $theme) != null {\n                    --#{$repo}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context})};\n                }\n                @else {\n                    @error \"The #{$theme} context does not appear to be part of a supported theme.\";\n                }\n            }\n        }\n    }\n}\n\n/// ===========================================================================\n/// Define local variable\n///\n/// Returns CSS Variable for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n    @each $property, $value in $map {\n        $name: \"--#{$property}\";\n        $styles: $value;\n\n        @if type-of($value) == \"map\" {\n            @each $prop, $v in $value {\n                $name: \"__#{$property}--#{$prop}\";\n                $styles: $v;\n\n                // Print the variable definition\n                --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n            }\n        }\n        @else {\n            // Print the variable definition\n            --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n        }\n    }\n}\n\n/// ===========================================================================\n/// Surface properties  \n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct theme colors. \n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n///\n/// @example \n/// ```\n/// $LOCAL: band;\n/// @include surfaces;\n/// ```\n///\n/// @output\n/// ```\n/// :host([pfe-color=\"darker\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"darkest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"base\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lighter\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lightest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"accent\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///   --theme: saturated;\n/// }\n/// \n/// :host([pfe-color=\"complement\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///   --theme: saturated;\n/// }\n/// ```\n/// ===========================================================================\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: #{$repo}-color) {\n    @each $color in $surfaces {\n        $theme: #{pfe-get-theme(surface--#{$color}--theme)};\n        :host([#{$attr-name}=\"#{$color}\"]) {\n            @include pfe-print-local((\n                BackgroundColor: pfe-var(surface--#{$color}),\n                theme: pfe-var(surface--#{$color}--theme, #{$theme})\n            ));\n            @extend %fallback-surface;\n        }\n    }\n}\n\n/// ===========================================================================\n/// Context properties\n///\n/// Prints the `on` attribute with IE11 fallbacks\n///\n/// @param {List} themes [$THEMES] - defaults to the global $THEMES list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example\n/// ```\n///   @include theme-contexts; // imports on=\"light\" etc support\n/// ```\n///\n/// @output\n/// ```\n/// :host([on=\"dark\"]) {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n/// }\n/// \n/// @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///   :host([on=\"dark\"]) {\n///     color: #fff;\n///     color: var(--pfe-theme--color--text--on-dark, #fff);\n///   }\n/// }\n/// ```\n/// ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"]) \n/// ===========================================================================\n@mixin pfe-theme-contexts($themes: $THEMES, $ie-fallback: true) {\n    // Helper attributes to aid in theming\n    @each $theme in $themes {\n        :host([on=\"#{$theme}\"]) {\n            @include pfe-set-broadcast-theme($theme);\n        }\n    }\n    @if $ie-fallback {\n        :host {\n            @extend %fallback-text;\n        }\n    }\n}\n","/// ===========================================================================\n/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map - SASS Map of variables\n/// @param {String} $fallback [\"\"] - Optional fallback override\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit\n/// @example -\n///\n///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-var( text )};\n///           background:  #{pfe-var( surface--base )};\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-get-from-map($category, $key, $map, $fallback: null) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--\";\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @requires {Map} $pfe-vars - A map of the variables in the repository\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var( container-spacer )};\n///           font-size:   #{pfe-var( font-size )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            padding: var(--pfe-theme--container-spacer, 16px);\n///            font-size: var(--pfe-theme--font-size, 16px);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// ===========================================================================\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// ===========================================================================\n/// Apply broadcast function, for use with text & links.\n///\n/// It requests that the color property look for a broadcasted variable (from a container component)\n/// first if there is one, and if not, use a theme variable, with the hex color fallback.\n///\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n///\n/// @example:   color: #{pfe-broadcasted(ui-base--hover)};\n/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.\";\n///\n/// @example:   color: #{pfe-broadcasted(link)};\n/// @output:  color: var(--pfe-broadcasted--link);\n/// Was: pfe-radio!\n/// ===========================================================================\n@function pfe-broadcasted($broadcast) {\n    $fallback: \"\";\n    @if $USE-FALLBACK {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           z-index:     #{pfe-zindex( content )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            z-index: var(--pfe-theme--zindex--content, 1);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// ===========================================================================\n/// Map value fetch\n///\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n///\n/// @param {String} $name - Name of the key for the map\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           background-color:     #{pfe-fetch( ui-base )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            background-color: #06c;\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"]}