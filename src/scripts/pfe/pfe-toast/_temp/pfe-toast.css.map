{"version":3,"sources":["pfe-toast.css","pfe-toast.scss","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAAA,gBAAgB;ACuChB;EAEE,0BAAoB;EAApB,4BAAoB;MAApB,uBAAoB;UAApB,oBAAoB;EACpB,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,8BAAmB;EAAnB,6BAAmB;EAAnB,2BAAmB;MAAnB,uBAAmB;UAAnB,mBAAmB;EACnB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAG3B,kBAAkB;EAClB,gCCmFkC;EDnFlC,sHCmFkC;EDlFlC,SCkFkC;EDlFlC,gCCkFkC;EDjFlC,uECRkC;EDQlC,+DCRkC;EDQlC,8ICRkC;EDQlC,sICRkC;EDSlC,kBAAkB;EAElB,gBC8EkC;ED9ElC,4CC8EkC;ED7ElC,gBC6EkC;ED7ElC,4CC6EkC;AFtHpC;;AC2CE;EAjBF;IAkBE,0BAA2C;IAA3C,sDAA2C;IACzC,0BAA2C;IAA3C,sDAA2C;EDvC7C;AACF;;AC0CA;EACE,aAAa;ADvCf;;AC0CA;EACE,wBAAmC;ADvCrC;;AC0CA;EACG,wGAAmC;ADvCtC;;AC0CA;EACE,aAAa;ADvCf;;AC0CA;EACE,iBAAgB;EAChB,iBAAgB;EAChB,sBAAqB;EACrB,iBAAgB;EAChB,mBAAkB;EAClB,0BAAqB;EACrB,mBAAkB;ADvCpB;;AC2CE;EAEE,8BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;EAGd,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;EACvB,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,8BAAqB;EAArB,6BAAqB;EAArB,6BAAqB;MAArB,yBAAqB;UAArB,qBAAqB;EACrB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAE3B,sBC+BgC;ED/BhC,gHC+BgC;ED9BhC,+FC8BgC;UD9BhC,uFC8BgC;ED9BhC,uIC8BgC;UD9BhC,+HC8BgC;ED7BhC,cC6BgC;ED7BhC,iFC6BgC;ED5BhC,aC4BgC;ED5BhC,mDC4BgC;AFxEpC;;AC8CE;EAEE,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;AD5ClB;;AC8CE;EAEE,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;EAEd,6BAA6B;EAC7B,YAAY;EACZ,eAAe;EACf,SAAS;EACT,gBCcgC;EDdhC,4MCcgC;AF3DpC;;ACqCG;EAWG,aCW8B;EDX9B,sGCW8B;EDV9B,YCU8B;EDV9B,kDCU8B;EDT9B,WCS8B;EDT9B,gDCS8B;AFrDpC;;AC+BG;EAkBK,UCI4B;EDJ5B,qDCI4B;AFjDpC","file":"pfe-toast.css","sourcesContent":["@charset \"UTF-8\";\n:host {\n  align-items: stretch;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n  position: absolute;\n  right: var(--pfe-toast--Right, calc(-1 * (var(--pfe-toast--MaxWidth, 500px) + var(--pfe-toast--Right--offset, 50px))));\n  top: var(--pfe-toast--Top, 50px);\n  transition: right var(--pfe-theme--animation-speed, 0.3s) var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  will-change: right;\n  max-width: var(--pfe-toast--MaxWidth, 500px);\n  min-width: var(--pfe-toast--MinWidth, 250px);\n}\n\n@media only screen and (max-width: 575px) {\n  :host {\n    max-width: calc(var(--pfe-toast--MaxWidth, 500px) / 2);\n    min-width: calc(var(--pfe-toast--MinWidth, 250px) / 2);\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host(.open) {\n  --pfe-toast--Right: 50px;\n}\n\n:host(:not(.open)) {\n  --pfe-toast--Right: calc(-1 * var(--pfe-toast--MaxWidth, 500px) + var(--pfe-toast--Right--offset, 50px));\n}\n\n::slotted(:first-child) {\n  margin-top: 0;\n}\n\n::slotted(button) {\n  background:  none;\n  border-radius:  0;\n  display:  inline-block;\n  margin-bottom:  0;\n  margin-right:  1rem;\n  padding:   0.5rem  0.75rem;\n  text-align:  center;\n}\n\n.pfe-toast__container {\n  align-self: flex-start;\n  flex: 1 1 auto;\n  align-items: flex-start;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n  background-color: var(--pfe-toast__container--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  box-shadow: var(--pfe-toast__container--BoxShadow, rgba(3, 3, 3, 0.13) 0px 3px 7px 3px, rgba(3, 3, 3, 0.12) 0px 11px 24px 16px);\n  color: var(--pfe-toast__container--Color, var(--pfe-theme--color--text, #151515));\n  padding: var(--pfe-toast__container--Padding, 1rem);\n}\n\n.pfe-toast__content {\n  flex: 1 1 auto;\n}\n\n.pfe-toast__close {\n  flex: 0 0 auto;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 0;\n  padding: var(--pfe-toast__close--Padding, var(--pfe-toast__close--PaddingTop, 0) var(--pfe-toast__close--PaddingRight, 0) var(--pfe-toast__close--PaddingBottom, 0) var(--pfe-toast__close--PaddingLeft, 0));\n}\n\n.pfe-toast__close > svg {\n  fill: var(--pfe-toast__close--svg--Fill, var(--pfe-theme--color--feedback--default--darkest, #3c3f42));\n  height: var(--pfe-toast__close--svg--Height, 12px);\n  width: var(--pfe-toast__close--svg--Width, 12px);\n}\n\n.pfe-toast__close:hover > svg {\n  fill: var(--pfe-toast__close--svg--Fill--hover, #333);\n}\n","@import \"../../pfe-sass/pfe-sass\";\n$LOCAL: toast;\n\n$LOCAL-VARIABLES: (\n  Top: 50px,\n  MaxWidth: 500px,\n  MinWidth: 250px,\n  Right--offset: 50px, // needed with box-shadow\n\n  container: (\n    BackgroundColor: pfe-var(surface--lightest),\n    // BoxShadow: pfe-var(box-shadow--lg),\n    // @TODO update this to use pfe-sass box-shadow variables\n    BoxShadow: #{rgba(3, 3, 3, 0.13) 0px 3px 7px 3px, rgba(3, 3, 3, 0.12) 0px 11px 24px 16px},\n    Color: pfe-var(text),\n    Padding: 1rem\n  ),\n\n  close: (\n    svg--Fill: pfe-var(feedback--default--darkest),\n  \tsvg--Fill--hover: $pfelements--gray-dark,\n  \tsvg--Height: 12px,\n  \tsvg--Width: 12px,\n  \n  \tPaddingTop: 0,\n  \tPaddingRight: 0,\n  \tPaddingBottom: 0,\n  \tPaddingLeft: 0\n  )\n);\n\n// Nested internal variables (pfe-local calls), maps cannot \"self-reference\"\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  Right: calc(-1 * (#{pfe-local(MaxWidth)} + #{pfe-local(Right--offset)})),\n  close: (\n    Padding: pfe-local(PaddingTop, $region: close) pfe-local(PaddingRight, $region: close) pfe-local(PaddingBottom, $region: close) pfe-local(PaddingLeft, $region: close)\n  )\n));\n\n:host {\n  // flex parent props\n  align-items: stretch;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n  \n  // animation\n  position: absolute;\n  right:  pfe-local(Right);\n  top:    pfe-local(Top);\n  transition: right pfe-var(animation-speed) pfe-var(animation-timing);\n  will-change: right;\n  \n  max-width: pfe-local(MaxWidth);\n  min-width: pfe-local(MinWidth);\n\n  @media only screen and (max-width: #{pfe-breakpoint($size: sm, $max: true)}) {\n\t\tmax-width: calc(#{pfe-local(MaxWidth)} / 2);\n    min-width: calc(#{pfe-local(MinWidth)} / 2);\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host(.open) {\n  --pfe-#{$LOCAL}--Right: 50px;\n}\n\n:host(:not(.open)){\n   --pfe-#{$LOCAL}--Right: calc(-1 * #{pfe-local(MaxWidth)} + #{pfe-local(Right--offset)});\n}\n\n::slotted(:first-child) {\n  margin-top: 0;\n}\n\n::slotted(button) {\n  background: none;\n  border-radius: 0;\n  display: inline-block;\n  margin-bottom: 0;\n  margin-right: 1rem;\n  padding: .5rem .75rem;\n  text-align: center;\n}\n\n.pfe-toast {\n  &__container {\n    // flex child props\n    align-self: flex-start;\n    flex: 1 1 auto;\n\n    // flex parent props\n    align-items: flex-start;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: flex-start;\n\n    background-color: pfe-local(BackgroundColor, $region: container);\n    box-shadow:       pfe-local(BoxShadow, $region: container);\n    color:            pfe-local(Color, $region: container);\n    padding:          pfe-local(Padding, $region: container);\n  }\n  &__content {\n    // flex child props\n    flex: 1 1 auto;\n  }\n  &__close {\n    // flex child props\n    flex: 0 0 auto;\n\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    margin: 0;\n    padding: pfe-local(Padding, $region: close);\n    \n    & > svg {\n      fill:   pfe-local(svg--Fill, $region: close);\n      height: pfe-local(svg--Height, $region: close);\n      width:  pfe-local(svg--Width, $region: close);\n    }\n    \n    &:hover {\n      & > svg {\n        fill: pfe-local(svg--Fill--hover, $region: close);\n      }\n    }\n  }\n}\n","/// ===========================================================================\n/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map - SASS Map of variables\n/// @param {String} $fallback [\"\"] - Optional fallback override\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit\n/// @example -\n///\n///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-var( text )};\n///           background:  #{pfe-var( surface--base )};\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-get-from-map($category, $key, $map, $fallback: null) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--\";\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @requires {Map} $pfe-vars - A map of the variables in the repository\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var( container-spacer )};\n///           font-size:   #{pfe-var( font-size )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            padding: var(--pfe-theme--container-spacer, 16px);\n///            font-size: var(--pfe-theme--font-size, 16px);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// ===========================================================================\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// ===========================================================================\n/// Apply broadcast function, for use with text & links.\n///\n/// It requests that the color property look for a broadcasted variable (from a container component)\n/// first if there is one, and if not, use a theme variable, with the hex color fallback.\n///\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n///\n/// @example:   color: #{pfe-broadcasted(ui-base--hover)};\n/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.\";\n///\n/// @example:   color: #{pfe-broadcasted(link)};\n/// @output:  color: var(--pfe-broadcasted--link);\n/// Was: pfe-radio!\n/// ===========================================================================\n@function pfe-broadcasted($broadcast) {\n    $fallback: \"\";\n    @if $USE-FALLBACK {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           z-index:     #{pfe-zindex( content )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            z-index: var(--pfe-theme--zindex--content, 1);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// ===========================================================================\n/// Map value fetch\n///\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n///\n/// @param {String} $name - Name of the key for the map\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           background-color:     #{pfe-fetch( ui-base )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            background-color: #06c;\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"]}