{"version":3,"sources":["pfe-accordion-header.scss","../../pfe-sass/functions/_custom-properties.scss","pfe-accordion-header.css","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/mixins/_components.scss","../../pfe-sass/mixins/_mixins.scss","../../../node_modules/@patternfly/patternfly/sass-utilities/colors.scss","../../pfe-sass/maps/_general.scss"],"names":[],"mappings":"AAKA;EACE,mFCoCkC;EDpClC,2ECoCkC;EDpClC,mECoCkC;EDpClC,oICoCkC;EDpClC,uHCoCkC;EDpClC,+GCoCkC;EDpClC,uGCoCkC;EDpClC,4MCoCkC;EDnClC,cAAc;AEJhB;;AFEA;EAMI,SAAS;AEJb;;AFFA;EG6GY,qCAA+B;EAA/B,0BAA+B;EAL3B,6RAA+B;ECtB7C,SAAS;EACT,WH2CkC;EG3ClC,wCH2CkC;EG1ClC,2BAAgE;EAAhE,2EAAgE;EAChE,YAAY;EACZ,kBAAkB;EAGlB,6BHqCkC;EGrClC,oEHqCkC;EGpClC,cHoCkC;EGpClC,yEHoCkC;EGjClC,uBHiCkC;EGjClC,6IHiCkC;EGhClC,qBHgCkC;EGhClC,oGHgCkC;EG/BlC,qBH+BkC;EG/BlC,6DH+BkC;EG9BlC,wBH8BkC;EG9BlC,0GH8BkC;EG7BlC,kCH6BkC;EG7BlC,6MH6BkC;EG3BlC,mDH2BkC;UG3BlC,2CH2BkC;EG1BlC,qCH0BkC;EGDlC,eAAe;EAEf,oBAAoB;EACpB,2BHFkC;EGElC,gGHFkC;EGGlC,gBH5FkC;EG4FlC,qDH5FkC;EG6FlC,gBHJkC;EGIlC,iDHJkC;EGKlC,gBH9FkC;EG8FlC,+CH9FkC;EG+FlC,+CHNkC;ACjGpC;;AF7BA;EG6GY,4GAA+B;AD5E3C;;AFjCA;EIuII,aAAa;EACb,sBHnGgC;EGmGhC,sEHnGgC;ACCpC;;AFtCA;EI4IM,aAAa;EACb,0BAA0B;AFlGhC;;AF3CA;EIiJM,SAAS;AFlGf;;AGvCoC;ELRpC;IKQwC,qCAAA;ILMlC,gBAAgB;EEuCpB;AACF;;AGxDM;ELEN;IKF4F,UAAA;ILoBtF,kBAAkB;EE0CtB;EF5DF;IAoBQ,uBMR6B;EJmDnC;AACF;;AFhEA;EG6GY,+EAA+B;EAA/B,+EAA+B;EAA/B,qFAA+B;EAA/B,uCAA+B;EAA/B,8DAA+B;EAA/B,4GAA+B;EAA/B,+GAA+B;EAA/B,0BAA+B;ADlC3C;;AG7EM;ELEN;IKF4F,UAAA;IL8BpF,sBAAsB;IACtB,uBMjB6B;INkB7B,2BM/BgC;EJoFtC;AACF;;AFhDA;EIyJE,WAAW;EACX,kBAAkB;EAClB,uBAAoD;EAApD,2DAAoD;EAEpD,cAAc;EACd,mBH7JkC;EG6JlC,4DH7JkC;EG8JlC,aAR4D;EAS5D,YAT4D;EAU5D,2CAA2B;EAA3B,mCAA2B;EAA3B,2BAA2B;EAA3B,oDAA2B;EAgBzB,2BAA2B;EAC3B,gCAAwB;UAAxB,wBAAwB;EAMtB,0BAAkD;EAAlD,8DAAkD;AF1HxD;;AF9DA;EAKI,kCAA0B;UAA1B,0BAA0B;AE6D9B;;AFxDA;EG+DY,gFAA+B;ADH3C;;AFxDA;EG2DY,qCAA+B;ADC3C;;AFrDI;EGoDQ,0DAA+B;EAA/B,6DAA+B;EAA/B,0FAA+B;EAA/B,gCAA+B;ADQ3C;;AF5DI;EGoDQ,oDAA+B;EAA/B,6DAA+B;EAA/B,4FAA+B;EAA/B,gCAA+B;ADe3C;;AFxDA;EAEI,8BAA8D;EAA9D,uGAA8D;AE0DlE;;AGlIM;ELsEN;IKtE4F,UAAA;IL0EtF,4BAA4B;IAC5B,2BM1EkC;IN2ElC,0BM3EkC;IN4ElC,sBOxD8B;ELsHlC;AACF;;AFtEA;EIyHE,WAAW;EACX,kBAAkB;EAClB,wBAAoD;EAApD,4DAAoD;EAEpD,cAAc;EACd,mBH7JkC;EG6JlC,4DH7JkC;EG8JlC,aAR4D;EAS5D,YAT4D;EAU5D,2CAA2B;EAA3B,mCAA2B;EAA3B,2BAA2B;EAA3B,oDAA2B;EAgBzB,2BAA2B;EAC3B,gCAAwB;UAAxB,wBAAwB;EAEtB,yBAAiD;EAAjD,6DAAiD;EACjD,iCAAyB;UAAzB,yBAAyB;AFhE/B;;AFrFA;EAeM,gCAAwB;UAAxB,wBAAwB;AE0E9B;;AFzFA;EAoBM,wCAA2I;EAA3I,0MAA2I;AEyEjJ;;AF7FA;EAsBQ,mCAAsG;EAAtG,4HAAsG;AE2E9G","file":"pfe-accordion-header.css","sourcesContent":["@import \"shared-assets\";\n\n/// ===========================================================================\n/// DEFAULT ACCORDION HEADING\n/// ===========================================================================\n:host {\n  transition: transform 0.3s pfe-var(animation-timing);\n  display: block;\n\n  // Shadow template styles\n  > * {\n    margin: 0;\n  }\n\n  button {\n    @include pfe-trigger;\n\n    // @TODO workaround, can we get the variables working?\n    @include browser-query(edge) {\n      text-align: left;\n    }\n\n    @include browser-query(ie11) {\n      padding: 16px 24px;\n      &:hover {\n        border-left-color: pfe-fetch(ui-accent);\n      }\n    }\n\n    &[aria-expanded=\"true\"] {\n      $accordion: pfe-accordion-variables($state: expanded);\n      @include pfe-print-local($accordion);\n      @include browser-query(ie11) {\n        border-bottom-width: 0;\n        border-left-color: pfe-fetch(ui-accent);\n        border-right-color: pfe-fetch(surface--border);\n      }\n    }\n  }\n}\n\n:host(:not([pfe-disclosure=\"true\"])) {\n  button::after {\n    @include pfe-chevron($state: closed);\n  }\n  button[aria-expanded=\"true\"]::after {\n    transform: rotate(-135deg);\n  }\n}\n\n// Add border bottom to the last button in an accordion set.\n:host(:last-of-type) button:not([aria-expanded=\"true\"]) {\n  @include pfe-trigger-last;\n}\n\n:host(:last-of-type.animating) button {\n  @include pfe-print-local((BorderBottomWidth: 0));\n}\n\n// Styles contextual to theme\n@each $context in $THEMES {\n  @if $context != light {\n    :host([on=\"#{$context}\"]) button[aria-expanded=\"true\"] {\n      $accordion: pfe-accordion-variables($state: expanded, $theme: #{$context});\n      @include pfe-print-local($accordion);\n    }\n  }\n}\n\n/// ===========================================================================\n/// DISCLOSURE STYLES\n/// ===========================================================================\n\n:host([pfe-disclosure=\"true\"]) {\n  button {\n    padding-left: calc((#{pfe-local(Padding, $region: base)} * 3));\n    @include browser-query(ie11) {\n      padding: 16px 24px 16px 47px;\n      border-right-color: pfe-fetch(surface--border);\n      border-left-color: pfe-fetch(surface--border);\n      border-left-width: pfe-fetch(surface--border-width);\n    }\n\n    &::before {\n      @include pfe-chevron($state: closed, $position: before, $offset: .55em);\n    }\n    \n    &[aria-expanded=\"true\"]::before {\n      transform: rotate(45deg);\n    }\n    \n    &[aria-expanded=\"true\"],\n    &:not([aria-expanded=\"true\"]):hover {\n      padding-left: calc(#{pfe-local(Padding, $region: base)} * 3 - #{pfe-var(surface--border-width--heavy)} + #{pfe-var(surface--border-width)});\n      &::before {\n        margin-left: calc((#{pfe-var(surface--border-width--heavy)} - #{pfe-var(surface--border-width)}) * -1);\n      }\n    }\n  }\n}\n","/// ===========================================================================\n/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map - SASS Map of variables\n/// @param {String} $fallback [\"\"] - Optional fallback override\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit\n/// @example -\n///\n///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-var( text )};\n///           background:  #{pfe-var( surface--base )};\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-get-from-map($category, $key, $map, $fallback: null) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--\";\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @requires {Map} $pfe-vars - A map of the variables in the repository\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var( container-spacer )};\n///           font-size:   #{pfe-var( font-size )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            padding: var(--pfe-theme--container-spacer, 16px);\n///            font-size: var(--pfe-theme--font-size, 16px);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// ===========================================================================\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// ===========================================================================\n/// Apply broadcast function, for use with text & links.\n///\n/// It requests that the color property look for a broadcasted variable (from a container component)\n/// first if there is one, and if not, use a theme variable, with the hex color fallback.\n///\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n///\n/// @example:   color: #{pfe-broadcasted(ui-base--hover)};\n/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.\";\n///\n/// @example:   color: #{pfe-broadcasted(link)};\n/// @output:  color: var(--pfe-broadcasted--link);\n/// Was: pfe-radio!\n/// ===========================================================================\n@function pfe-broadcasted($broadcast) {\n    $fallback: \"\";\n    @if $USE-FALLBACK {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           z-index:     #{pfe-zindex( content )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            z-index: var(--pfe-theme--zindex--content, 1);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// ===========================================================================\n/// Map value fetch\n///\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n///\n/// @param {String} $name - Name of the key for the map\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           background-color:     #{pfe-fetch( ui-base )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            background-color: #06c;\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}",":host {\n  transition: transform 0.3s var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  display: block;\n}\n\n:host > * {\n  margin: 0;\n}\n\n:host button {\n  --pfe-accordion--BorderBottomWidth: 0;\n  --pfe-accordion--ZIndex: 3;\n  --pfe-accordion__trigger--Padding: var(--pfe-accordion__base--Padding, var(--pfe-theme--container-spacer, 16px)) 50px var(--pfe-accordion__base--Padding, var(--pfe-theme--container-spacer, 16px)) calc(var(--pfe-accordion__base--Padding, var(--pfe-theme--container-spacer, 16px)) * 1.5);\n  margin: 0;\n  width: var(--pfe-accordion--Width, 100%);\n  max-width: calc(100% - var(--pfe-theme--surface--border-width--heavy, 4px));\n  height: auto;\n  position: relative;\n  background-color: var(--pfe-accordion--BackgroundColor, transparent);\n  color: var(--pfe-accordion--Color, var(--pfe-broadcasted--text, #3c3f42));\n  border: 0 var(--pfe-theme--surface--border-style, solid) var(--pfe-accordion--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n  border-top-width: var(--pfe-accordion--BorderTopWidth, var(--pfe-theme--surface--border-width, 1px));\n  border-right-width: var(--pfe-accordion--BorderRightWidth, 0);\n  border-bottom-width: var(--pfe-accordion--BorderBottomWidth, var(--pfe-theme--surface--border-width, 1px));\n  border-left: var(--pfe-accordion--BorderLeftWidth, var(--pfe-theme--surface--border-width--heavy, 4px)) var(--pfe-theme--surface--border-style, solid) var(--pfe-accordion--BorderColor--accent, transparent);\n  box-shadow: var(--pfe-accordion--BoxShadow);\n  z-index: var(--pfe-accordion--ZIndex);\n  cursor: pointer;\n  font-family: inherit;\n  font-size: var(--pfe-accordion--FontSize--header, calc(var(--pfe-theme--font-size, 16px) * 1.1));\n  font-weight: var(--pfe-theme--font-weight--bold, 700);\n  text-align: var(--pfe-accordion--TextAlign, left);\n  line-height: var(--pfe-theme--line-height, 1.5);\n  padding: var(--pfe-accordion__trigger--Padding);\n}\n\n:host button:hover {\n  --pfe-accordion--BorderColor--accent: var(--pfe-accordion--accent, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host button:hover {\n  outline: none;\n  border-left-width: var(--pfe-theme--surface--border-width--heavy, 4px);\n}\n\n:host button:focus {\n  outline: none;\n  text-decoration: underline;\n}\n\n:host button::-moz-focus-inner {\n  border: 0;\n}\n\n@supports (-ms-ime-align: auto) {\n  :host button {\n    /* Microsoft Edge Browser 16+ (All) */\n    text-align: left;\n  }\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host button {\n    /* IE10+ */\n    padding: 16px 24px;\n  }\n  :host button:hover {\n    border-left-color: #06c;\n  }\n}\n\n:host button[aria-expanded=\"true\"] {\n  --pfe-accordion--BorderColor: var(--pfe-theme--color--surface--border, #d2d2d2);\n  --pfe-accordion--BorderRightWidth: var(--pfe-theme--surface--border-width, 1px);\n  --pfe-accordion--BorderLeftWidth: var(--pfe-theme--surface--border-width--heavy, 4px);\n  --pfe-accordion--BackgroundColor: white;\n  --pfe-accordion--Color: var(--pfe-theme--color--text, #151515);\n  --pfe-accordion--BorderColor--accent: var(--pfe-accordion--accent, var(--pfe-theme--color--ui-accent, #06c));\n  --pfe-accordion--BoxShadow: 0 5px var(--pfe-theme--surface--border-width--heavy, 4px) rgba(140, 140, 140, 0.35);\n  --pfe-accordion--ZIndex: 3;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host button[aria-expanded=\"true\"] {\n    /* IE10+ */\n    border-bottom-width: 0;\n    border-left-color: #06c;\n    border-right-color: #d2d2d2;\n  }\n}\n\n:host(:not([pfe-disclosure=\"true\"])) button::after {\n  content: \"\";\n  position: absolute;\n  top: calc(var(--pfe-theme--container-spacer, 16px) + 0.4em);\n  display: block;\n  border-style: var(--pfe-theme--surface--border-style, solid);\n  height: 0.4em;\n  width: 0.4em;\n  transition: transform 0.15s;\n  border-width: 0 .1em .1em 0;\n  transform: rotate(45deg);\n  right: calc(var(--pfe-theme--container-spacer, 16px) * 1.3125);\n}\n\n:host(:not([pfe-disclosure=\"true\"])) button[aria-expanded=\"true\"]::after {\n  transform: rotate(-135deg);\n}\n\n:host(:last-of-type) button:not([aria-expanded=\"true\"]) {\n  --pfe-accordion--BorderBottomWidth: var(--pfe-theme--surface--border-width, 1px);\n}\n\n:host(:last-of-type.animating) button {\n  --pfe-accordion--BorderBottomWidth: 0;\n}\n\n:host([on=\"dark\"]) button[aria-expanded=\"true\"] {\n  --pfe-accordion--BackgroundColor: rgba(247, 247, 249, 0.1);\n  --pfe-accordion--Color: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-accordion--BorderColor--accent: var(--pfe-theme--color--ui-accent--on-dark, #73bcf7);\n  --pfe-accordion--BoxShadow: none;\n}\n\n:host([on=\"saturated\"]) button[aria-expanded=\"true\"] {\n  --pfe-accordion--BackgroundColor: rgba(0, 0, 0, 0.2);\n  --pfe-accordion--Color: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-accordion--BorderColor--accent: var(--pfe-theme--color--ui-accent--on-saturated, #fff);\n  --pfe-accordion--BoxShadow: none;\n}\n\n:host([pfe-disclosure=\"true\"]) button {\n  padding-left: calc((var(--pfe-accordion__base--Padding, var(--pfe-theme--container-spacer, 16px)) * 3));\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host([pfe-disclosure=\"true\"]) button {\n    /* IE10+ */\n    padding: 16px 24px 16px 47px;\n    border-right-color: #d2d2d2;\n    border-left-color: #d2d2d2;\n    border-left-width: 1px;\n  }\n}\n\n:host([pfe-disclosure=\"true\"]) button::before {\n  content: \"\";\n  position: absolute;\n  top: calc(var(--pfe-theme--container-spacer, 16px) + 0.55em);\n  display: block;\n  border-style: var(--pfe-theme--surface--border-style, solid);\n  height: 0.4em;\n  width: 0.4em;\n  transition: transform 0.15s;\n  border-width: 0 .1em .1em 0;\n  transform: rotate(45deg);\n  left: calc(var(--pfe-theme--container-spacer, 16px) * 1.3125);\n  transform: rotate(-45deg);\n}\n\n:host([pfe-disclosure=\"true\"]) button[aria-expanded=\"true\"]::before {\n  transform: rotate(45deg);\n}\n\n:host([pfe-disclosure=\"true\"]) button[aria-expanded=\"true\"], :host([pfe-disclosure=\"true\"]) button:not([aria-expanded=\"true\"]):hover {\n  padding-left: calc(var(--pfe-accordion__base--Padding, var(--pfe-theme--container-spacer, 16px)) * 3 - var(--pfe-theme--surface--border-width--heavy, 4px) + var(--pfe-theme--surface--border-width, 1px));\n}\n\n:host([pfe-disclosure=\"true\"]) button[aria-expanded=\"true\"]::before, :host([pfe-disclosure=\"true\"]) button:not([aria-expanded=\"true\"]):hover::before {\n  margin-left: calc((var(--pfe-theme--surface--border-width--heavy, 4px) - var(--pfe-theme--surface--border-width, 1px)) * -1);\n}\n","/// ===========================================================================\n/// Broadcast mixin, for use with container components.\n///\n/// This will print all the broadcast variables, and set the value to the theme of your choosing, like on-dark or on-saturated.\n/// @param {String} $theme - Look up values from theme contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $BROADCAST-VARS - Default list of supported broadcast variables\n///\n/// @example Usage in a container component, i.e. pfe-card:\n/// ```\n///    :host {\n///      @include pfe-set-broadcast-theme(dark);\n///    }\n/// ```\n/// @output:\n/// ```\n///    :host {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n///    }\n/// ```\n/// ===========================================================================\n@mixin pfe-set-broadcast-theme($theme, $broadcast: $BROADCAST-VARS) {\n    @each $type in $broadcast {\n        $list: ();\n        $string: \"\";\n        $context: \"\";\n        $state: \"\";\n\n        @if str-starts-with($type, \"link\") {\n            $list: append($list, \"#{$type}\");\n\n            @each $s in (hover, focus, visited) {\n                $state: \"--#{$s}\";\n                $string: \"#{$type}#{$state}\";\n\n                @if not index($list, $string) {\n                    $list: append($list, \"#{$type}#{$state}\");\n                }\n            }\n        }\n        @else {\n            @if not index($list, $string) {\n                $list: append($list, \"#{$type}\");\n            }\n        }\n\n        @if index($THEMES, $theme) != null {\n            @if $theme != \"light\" {\n                $context: \"--on-#{$theme}\";\n            }\n        }\n        \n        @each $item in $list {\n            @if not index($BROADCAST-VARS, $type) {\n                @warn \"--#{$repo}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n            }\n            @else if not pfe-broadcasted(#{$item}#{$context}) {\n                @warn \"#{$item}#{$context} value does not currently exist.\";\n            }\n            @else {\n                @if index($THEMES, $theme) != null {\n                    --#{$repo}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context})};\n                }\n                @else {\n                    @error \"The #{$theme} context does not appear to be part of a supported theme.\";\n                }\n            }\n        }\n    }\n}\n\n/// ===========================================================================\n/// Define local variable\n///\n/// Returns CSS Variable for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n    @each $property, $value in $map {\n        $name: \"--#{$property}\";\n        $styles: $value;\n\n        @if type-of($value) == \"map\" {\n            @each $prop, $v in $value {\n                $name: \"__#{$property}--#{$prop}\";\n                $styles: $v;\n\n                // Print the variable definition\n                --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n            }\n        }\n        @else {\n            // Print the variable definition\n            --#{$repo}-#{$LOCAL}#{$name}: #{$styles};\n        }\n    }\n}\n\n/// ===========================================================================\n/// Surface properties  \n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct theme colors. \n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n///\n/// @example \n/// ```\n/// $LOCAL: band;\n/// @include surfaces;\n/// ```\n///\n/// @output\n/// ```\n/// :host([pfe-color=\"darker\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"darkest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///   --theme: dark;\n/// }\n/// \n/// :host([pfe-color=\"base\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lighter\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"lightest\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///   --theme: light;\n/// }\n/// \n/// :host([pfe-color=\"accent\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///   --theme: saturated;\n/// }\n/// \n/// :host([pfe-color=\"complement\"]) {\n///   --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///   --theme: saturated;\n/// }\n/// ```\n/// ===========================================================================\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: #{$repo}-color) {\n    @each $color in $surfaces {\n        $theme: #{pfe-get-theme(surface--#{$color}--theme)};\n        :host([#{$attr-name}=\"#{$color}\"]) {\n            @include pfe-print-local((\n                BackgroundColor: pfe-var(surface--#{$color}),\n                theme: pfe-var(surface--#{$color}--theme, #{$theme})\n            ));\n            @extend %fallback-surface;\n        }\n    }\n}\n\n/// ===========================================================================\n/// Context properties\n///\n/// Prints the `on` attribute with IE11 fallbacks\n///\n/// @param {List} themes [$THEMES] - defaults to the global $THEMES list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example\n/// ```\n///   @include theme-contexts; // imports on=\"light\" etc support\n/// ```\n///\n/// @output\n/// ```\n/// :host([on=\"dark\"]) {\n///   --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///   --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///   --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///   --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///   --pfe-broadcasted--link-decoration: none;\n///   --pfe-broadcasted--link-decoration--hover: underline;\n///   --pfe-broadcasted--link-decoration--focus: underline;\n///   --pfe-broadcasted--link-decoration--visited: none;\n/// }\n/// \n/// @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///   :host([on=\"dark\"]) {\n///     color: #fff;\n///     color: var(--pfe-theme--color--text--on-dark, #fff);\n///   }\n/// }\n/// ```\n/// ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"]) \n/// ===========================================================================\n@mixin pfe-theme-contexts($themes: $THEMES, $ie-fallback: true) {\n    // Helper attributes to aid in theming\n    @each $theme in $themes {\n        :host([on=\"#{$theme}\"]) {\n            @include pfe-set-broadcast-theme($theme);\n        }\n    }\n    @if $ie-fallback {\n        :host {\n            @extend %fallback-text;\n        }\n    }\n}\n","/// ===========================================================================\n/// Accordion-specific SASS Vars\n/// ===========================================================================\n\n@function pfe-accordion-variables($state: default, $theme: default, $variant: default) {\n  // Shared variables for all themes\n  $accordion-styles: ();\n\n  @if $state != expanded { // Default state\n    // Shared variables for all themes\n    $accordion-styles: (\n      BorderColor--accent: transparent,\n      BorderColor:         pfe-var(surface--border),\n      BorderTopWidth:      pfe-var(surface--border-width),\n      BorderRightWidth:    0,\n      BorderBottomWidth:   pfe-var(surface--border-width),\n      BorderLeftWidth:     pfe-var(surface--border-width--heavy),\n      Color:               pfe-broadcasted(text),\n      TextAlign:           left,\n      accent: pfe-var(ui-accent),\n      base: (\n        Padding:         pfe-var(container-spacer)\n      )\n    );\n\n    @if $theme == dark { // Dark theme\n      $accordion-styles: (\n        accent: pfe-var(ui-accent--on-dark)\n      );\n    }\n    @else if $theme == saturated { // Saturated theme\n      $accordion-styles: (\n        accent: pfe-var(ui-accent--on-saturated)\n      );\n    }\n\n    @if $variant == disclosure {\n      $accordion-styles: (\n        BorderRightWidth: pfe-var(surface--border-width),\n        BorderLeftWidth: pfe-var(surface--border-width),\n        BorderColor--accent: pfe-var(surface--border)\n      );\n    }\n  }\n  @else { // Expanded state\n    // Shared variables for all themes\n    $accordion-styles: (\n      BorderColor:         pfe-var(surface--border),\n      BorderRightWidth:    pfe-var(surface--border-width),\n      BorderLeftWidth:     pfe-var(surface--border-width--heavy),\n      // Defaults for light theme\n      BackgroundColor:     rgba(255, 255, 255, 1),\n      Color:               pfe-var(text),\n      BorderColor--accent: pfe-local(accent),\n      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35),\n      ZIndex: 3\n    );\n\n    @if $theme == dark { // Dark theme\n      $accordion-styles: (\n        BackgroundColor:    rgba(247, 247, 249, .1),\n        Color:               pfe-broadcasted(text),\n        BorderColor--accent: pfe-var(ui-accent--on-dark),\n        BoxShadow: none\n      );\n    }\n    @else if $theme == saturated { // Saturated theme\n      $accordion-styles: (\n        BackgroundColor:    rgba(0, 0, 0, 0.2),\n        Color:               pfe-broadcasted(text),\n        BorderColor--accent: pfe-var(ui-accent--on-saturated),\n        BoxShadow: none\n      );\n    }\n    \n    @if $variant == disclosure {\n      $accordion-styles: (\n        BorderLeftWidth: pfe-var(surface--border-width--heavy),\n        BorderColor--accent: pfe-var(ui-accent)\n      );\n    }\n  }\n\n  @return $accordion-styles;\n}\n\n@mixin pfe-accordion-props($variant: default) {\n  margin: 0;\n  width: pfe-local(Width, 100%);\n  max-width: calc(100% - #{pfe-var(surface--border-width--heavy)});\n  height: auto;\n  position: relative;\n\n  // Since the default bg color is transparent, look to broadcast values\n  background-color: pfe-local(BackgroundColor, transparent);\n  color:            pfe-local(Color);\n\n  // Border settings\n  border: 0 pfe-var(surface--border-style) pfe-local(BorderColor);\n  border-top-width:     pfe-local(BorderTopWidth);\n  border-right-width:   pfe-local(BorderRightWidth);\n  border-bottom-width:  pfe-local(BorderBottomWidth);\n  border-left: pfe-local(BorderLeftWidth) pfe-var(surface--border-style) pfe-local(BorderColor--accent);\n\n  box-shadow: pfe-local(BoxShadow);\n  z-index: pfe-local(ZIndex);\n\n  &:hover {\n    @include pfe-print-local((\n      BorderColor--accent: pfe-local(accent)\n    ));\n  }\n}\n\n//-- Trigger-specific properties\n@mixin pfe-trigger {\n  $chevron--spacing: 50px;\n\n  $LOCAL-VARIABLES: (\n    BorderBottomWidth: 0,\n    ZIndex: 3,\n    trigger: (\n      Padding: pfe-local(Padding, $region: base) $chevron--spacing pfe-local(Padding, $region: base) calc(#{pfe-local(Padding, $region: base)} * 1.5)\n    )\n  );\n\n  @include pfe-print-local($LOCAL-VARIABLES);\n  @include pfe-accordion-props;\n\n  // -webkit-appearance: button;\n  cursor: pointer;\n\n  font-family: inherit;\n  font-size:   pfe-local(FontSize--header, calc(#{pfe-var(font-size)} * 1.1));\n  font-weight: pfe-var(font-weight--bold);\n  text-align:  pfe-local(TextAlign, left);\n  line-height: pfe-var(line-height);\n  padding:     pfe-local(Padding, $region: trigger);\n\n  &:hover {\n    outline: none;\n    border-left-width: pfe-var(surface--border-width--heavy);\n  }\n\n  &:focus {\n      outline: none;\n      text-decoration: underline;\n  }\n\n  &::-moz-focus-inner {\n      border: 0;\n  }\n}\n\n@mixin pfe-trigger-last($theme: light) {\n  @include pfe-print-local((\n    BorderBottomWidth: pfe-var(surface--border-width)\n  ));\n}\n\n//-- Panel-specific properties\n@mixin pfe-panel-variables($theme: light) {\n  $LOCAL-VARIABLES: (\n    BorderTopWidth: 0\n  );\n\n  @if $theme == \"light\" { // Light theme\n    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35)\n    ));\n  }\n  @else {\n    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n      BoxShadow: none\n    ));\n  }\n\n  @include pfe-print-local($LOCAL-VARIABLES);\n}\n\n@mixin pfe-panel-container() {\n  // Ensure the box shadow does not propagate to nest accordions\n  @include pfe-print-local( ( BoxShadow: none ) );\n\n  @extend %container;\n  padding: pfe-local(Padding, $region: panel-container);\n}\n\n/// ===========================================================================\n/// Accordion chevrons\n/// ===========================================================================\n\n@mixin pfe-chevron($state: open, $position: after, $size: .4em, $offset: $size) {\n\n  content: \"\";\n  position: absolute;\n  top: calc(#{pfe-var(container-spacer)} + #{$offset});\n\n  display: block;\n  border-style: pfe-var(surface--border-style);\n  height: $size;\n  width:  $size;\n  transition: transform 0.15s;\n  @if $state == open {\n    border-width: .1em .1em 0 0;\n    border-bottom: 0;\n    transform: rotate(-45deg);\n    top: calc(#{pfe-var(container-spacer)} + #{$offset});\n    @if $position == before {\n      left: calc(#{pfe-var(container-spacer)} * 1.3125); // 21px\n      top: calc(#{pfe-var(container-spacer)} + .25em);\n      transform: rotate(135deg);\n    }\n    @else {\n      right: calc(#{pfe-var(container-spacer)} * 1.3125);\n    }\n  }\n  @else {\n    border-width: 0 .1em .1em 0;\n    transform: rotate(45deg);\n    @if $position == before {\n      left: calc(#{pfe-var(container-spacer)} * 1.3125);\n      transform: rotate(-45deg);\n    }\n    @else {\n      right: calc(#{pfe-var(container-spacer)} * 1.3125);\n    }\n  }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: #{pfe-var(surface--border-style)};\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","// Colors\n$pf-color-black-100:             #fafafa !default;\n$pf-color-black-150:             #f5f5f5 !default;\n$pf-color-black-200:             #f0f0f0 !default;\n$pf-color-black-300:             #d2d2d2 !default;\n$pf-color-black-400:             #b8bbbe !default;\n$pf-color-black-500:             #8a8d90 !default;\n$pf-color-black-600:             #6a6e73 !default;\n$pf-color-black-700:             #4f5255 !default;\n$pf-color-black-800:             #3c3f42 !default;\n$pf-color-black-850:             #212427 !default;\n$pf-color-black-900:             #151515 !default;\n$pf-color-black-1000:            #030303 !default;\n$pf-color-blue-50:               #e7f1fa !default;\n$pf-color-blue-100:              #bee1f4 !default;\n$pf-color-blue-200:              #73bcf7 !default;\n$pf-color-blue-300:              #2b9af3 !default;\n$pf-color-blue-400:              #06c !default;\n$pf-color-blue-500:              #004080 !default;\n$pf-color-blue-600:              #002952 !default;\n$pf-color-blue-700:              #001223 !default;\n$pf-color-cyan-50:               #f2f9f9 !default;\n$pf-color-cyan-100:              #a2d9d9 !default;\n$pf-color-cyan-200:              #73c5c5 !default;\n$pf-color-cyan-300:              #009596 !default;\n$pf-color-cyan-400:              #005f60 !default;\n$pf-color-cyan-500:              #003737 !default;\n$pf-color-cyan-600:              #002323 !default;\n$pf-color-cyan-700:              #000f0f !default;\n$pf-color-gold-50:               #fdf7e7 !default;\n$pf-color-gold-100:              #f9e0a2 !default;\n$pf-color-gold-200:              #f6d173 !default;\n$pf-color-gold-300:              #f4c145 !default;\n$pf-color-gold-400:              #f0ab00 !default;\n$pf-color-gold-500:              #c58c00 !default;\n$pf-color-gold-600:              #795600 !default;\n$pf-color-gold-700:              #3d2c00 !default;\n$pf-color-green-50:              #f3faf2 !default;\n$pf-color-green-100:             #bde5b8 !default;\n$pf-color-green-200:             #95d58e !default;\n$pf-color-green-300:             #6ec664 !default;\n$pf-color-green-400:             #5ba352 !default;\n$pf-color-green-500:             #3e8635 !default;\n$pf-color-green-600:             #1e4f18 !default;\n$pf-color-green-700:             #0f280d !default;\n$pf-color-light-blue-100:        #beedf9 !default;\n$pf-color-light-blue-200:        #7cdbf3 !default;\n$pf-color-light-blue-300:        #35caed !default;\n$pf-color-light-blue-400:        #00b9e4 !default;\n$pf-color-light-blue-500:        #008bad !default;\n$pf-color-light-blue-600:        #005c73 !default;\n$pf-color-light-blue-700:        #002d39 !default;\n$pf-color-light-green-100:       #e4f5bc !default;\n$pf-color-light-green-200:       #c8eb79 !default;\n$pf-color-light-green-300:       #ace12e !default;\n$pf-color-light-green-400:       #92d400 !default;\n$pf-color-light-green-500:       #6ca100 !default;\n$pf-color-light-green-600:       #486b00 !default;\n$pf-color-light-green-700:       #253600 !default;\n$pf-color-orange-100:            #f4b678 !default;\n$pf-color-orange-200:            #ef9234 !default;\n$pf-color-orange-300:            #ec7a08 !default;\n$pf-color-orange-400:            #c46100 !default;\n$pf-color-orange-500:            #8f4700 !default;\n$pf-color-orange-600:            #773d00 !default;\n$pf-color-orange-700:            #3b1f00 !default;\n$pf-color-purple-50:             #f2f0fc !default;\n$pf-color-purple-100:            #cbc1ff !default;\n$pf-color-purple-200:            #b2a3ff !default;\n$pf-color-purple-300:            #a18fff !default;\n$pf-color-purple-400:            #8476d1 !default;\n$pf-color-purple-500:            #6753ac !default;\n$pf-color-purple-600:            #40199a !default;\n$pf-color-purple-700:            #1f0066 !default;\n$pf-color-red-50:                #faeae8 !default;\n$pf-color-red-100:               #c9190b !default;\n$pf-color-red-200:               #a30000 !default;\n$pf-color-red-300:               #7d1007 !default;\n$pf-color-red-400:               #470000 !default;\n$pf-color-red-500:               #2c0000 !default;\n$pf-color-white:                 #fff !default;\n","$pfe-vars: (\n  container-spacer:              16px,\n  container-padding:             16px,\n  content-spacer:                24px,\n\n  font-size:                     16px,\n  line-height:                   1.5,\n\n  font-family:                   '\"Overpass\", Overpass, Helvetica, helvetica, arial, sans-serif',\n  font-family--heading:          '\"Overpass\", Overpass, Helvetica, helvetica, arial, sans-serif',\n  font-family--code:             '\"Overpass Mono\", Consolas, Monaco, 'Andale Mono', monospace',\n\n  font-size--heading--alpha:     32px,\n  font-size--heading--beta:      24px,\n  font-size--heading--gamma:     21px,\n  font-size--heading--delta:     18px,\n  font-size--heading--epsilon:   16px,\n  font-size--heading--zeta:      14px,\n\n  font-weight--light:            300,\n  font-weight--normal:           500,\n  font-weight--semi-bold:        600,\n  font-weight--bold:             700,\n\n  surface--border-width:         1px,\n  surface--border-width--heavy:  4px,\n  surface--border-style:         solid,\n  surface--border-radius:        3px,\n  surface--border-width--active: 3px,\n\n  icon-size:                     1em,\n\n  ui--element--size:             20px,\n\n  ui--border-width:              1px,\n  ui--border-width--active:      3px,\n  ui--border-style:              solid,\n  ui--border-radius:             2px,\n\n  ui--focus-outline-width:       1px,\n  ui--focus-outline-style:       solid,\n\n  link-decoration: none,\n  link-decoration--hover: underline,\n  link-decoration--focus: underline,\n  link-decoration--visited: none,\n  link-decoration--on-dark: none,\n  link-decoration--hover--on-dark: underline,\n  link-decoration--focus--on-dark: underline,\n  link-decoration--visited--on-dark: none,\n  link-decoration--on-saturated: underline,\n  link-decoration--hover--on-saturated: underline,\n  link-decoration--focus--on-saturated: underline,\n  link-decoration--visited--on-saturated: underline, \n\n  grid-breakpoint--xs:           0,\n  grid-breakpoint--sm:           576px,\n  grid-breakpoint--md:           768px,\n  grid-breakpoint--lg:           992px,\n  grid-breakpoint--xl:           1200px,\n\n  box-shadow--sm:                #{0  #{pfe-size-prem(1)}  #{pfe-size-prem(2)} 0 rgba($pf-color-black-1000, .2)},\n  box-shadow--md:                #{0  #{pfe-size-prem(2)}  #{pfe-size-prem(1)} #{pfe-size-prem(1)} rgba($pf-color-black-1000, .12), 0  #{pfe-size-prem(4)}  #{pfe-size-prem(11)} #{pfe-size-prem(6)} rgba($pf-color-black-1000, .05)},\n  box-shadow--lg:                #{0  #{pfe-size-prem(3)}  #{pfe-size-prem(7)} #{pfe-size-prem(3)} rgba($pf-color-black-1000, .13), 0  #{pfe-size-prem(11)}  #{pfe-size-prem(24)} #{pfe-size-prem(16)} rgba($pf-color-black-1000, .12)},\n  box-shadow--inset:             #{inset 0 0 #{pfe-size-prem(10)} 0 $pf-color-black-100},\n\n  animation-speed:               .3s,\n  animation-timing:              cubic-bezier(0.465, 0.183, 0.153, 0.946),\n  opacity:                       .09\n);\n"]}